//
//  JTGeneralPreferencesViewController.m
//  JobTracker
//
//  Created by Brad Greenlee on 4/20/13.
//  Copyright (c) 2012 Etsy. All rights reserved.
//

#import "JTGeneralPreferencesViewController.h"

@implementation JTGeneralPreferencesViewController

@synthesize jobTrackerURLCell, usernamesCell, customJobURLCell, refreshIntervalCell, startingJobNotificationPreference,
completedJobNotificationPreference, failedJobNotificationPreference, launchAtLoginPreference;

- (id)init {
    return [super initWithNibName:@"GeneralPreferencesView" bundle:nil];
}

#pragma mark -
#pragma mark MASPreferencesViewController

- (NSString *)identifier {
    return @"GeneralPreferences";
}

- (NSImage *)toolbarItemImage {
    return [NSImage imageNamed:NSImageNamePreferencesGeneral];
}

- (NSString *)toolbarItemLabel {
    return NSLocalizedString(@"General", @"Toolbar item name for the General preference pane");
}

- (void)awakeFromNib {
    [self loadSettings];
}

- (void)loadSettings {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];

    NSString *usernames = [defaults stringForKey:@"usernames"];
    if (usernames != nil) {
        [usernamesCell setStringValue:usernames];
    }
    
    NSString *customJobURL = [defaults stringForKey:@"customJobURL"];
    if (customJobURL != nil) {
        [customJobURLCell setStringValue:customJobURL];
    }

    NSInteger refreshInterval = [defaults integerForKey:@"refreshInterval"];
    if (refreshInterval == 0) {
        refreshInterval = DEFAULT_REFRESH_INTERVAL;
    }
    [refreshIntervalCell setIntegerValue:refreshInterval];

    // this replace just fixes the url generated by an earlier version and can eventually be removed
    NSString *jobTrackerURL = [[defaults stringForKey:@"jobTrackerURL"] stringByReplacingOccurrencesOfString:@"/jobtracker.jsp" withString:@""];
    if (jobTrackerURL != nil) {
        [jobTrackerURLCell setStringValue:jobTrackerURL];
    }

    [startingJobNotificationPreference setState:[defaults boolForKey:@"startingJobNotificationsEnabled"] ? NSOnState : NSOffState];
    [completedJobNotificationPreference setState:[defaults boolForKey:@"completedJobNotificationsEnabled"] ? NSOnState : NSOffState];
    [failedJobNotificationPreference setState:[defaults boolForKey:@"failedJobNotificationsEnabled"] ? NSOnState : NSOffState];

    LaunchAtLoginController *launchController = [[LaunchAtLoginController alloc] init];
    BOOL launchAtLoginEnabled = [launchController launchAtLogin];

    if (launchAtLoginEnabled) {
        [launchAtLoginPreference setState:NSOnState];
    } else {
        [launchAtLoginPreference setState:NSOffState];
    }
}

- (void)saveSettings {
    NSString *jobTrackerURL = [[jobTrackerURLCell stringValue] stringByReplacingOccurrencesOfString:@"/jobtracker.jsp" withString:@""];
    if ([jobTrackerURL length] > 7 && !([[jobTrackerURL substringToIndex:7] isEqualToString:@"http://"] ||
                                        [[jobTrackerURL substringToIndex:8] isEqualToString:@"https://"]))
    {
        jobTrackerURL = [@"http://" stringByAppendingString:jobTrackerURL];
    }

    // do a HEAD request to see what version of job tracker we're using (CDH4 or 5)
    NSInteger cdhVersion = 4;
    NSString *testCDH5URL = [jobTrackerURL stringByAppendingString:@"/ws/v1/cluster"];
    NSMutableURLRequest *testCDH5Req = [NSMutableURLRequest requestWithURL:[NSURL URLWithString: testCDH5URL]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:5.0f];
    [testCDH5Req setHTTPMethod:@"HEAD"];
    NSHTTPURLResponse *httpResponse = nil;
    NSError *error = nil;
    [NSURLConnection sendSynchronousRequest:testCDH5Req
                          returningResponse:&httpResponse
                                      error:&error];
    if ([httpResponse statusCode] == 200) {
        cdhVersion = 5;
    }
    
    NSString *usernames = [[usernamesCell stringValue] stringByReplacingOccurrencesOfString:@" " withString:@""];
    NSString *customJobURL = [customJobURLCell stringValue];
    NSInteger refreshInterval = [refreshIntervalCell integerValue];
    if (refreshInterval < 1) {
        refreshInterval = 1;
    }
    BOOL startingJobNotificationsEnabled = [startingJobNotificationPreference state] == NSOnState;
    BOOL completedJobNotificationsEnabled = [completedJobNotificationPreference state] == NSOnState;
    BOOL failedJobNotificationsEnabled = [failedJobNotificationPreference state] == NSOnState;
    BOOL launchOnLoginEnabled = [launchAtLoginPreference state] == NSOnState;

    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];

    // Save the Launch-on-Login preference.
    LaunchAtLoginController *launchController = [[LaunchAtLoginController alloc] init];
	[launchController setLaunchAtLogin:launchOnLoginEnabled];

    [defaults setObject:jobTrackerURL forKey:@"jobTrackerURL"];
    [defaults setObject:usernames forKey:@"usernames"];
    [defaults setObject:customJobURL forKey:@"customJobURL"];
    [defaults setInteger:refreshInterval forKey:@"refreshInterval"];
    [defaults setBool:startingJobNotificationsEnabled forKey:@"startingJobNotificationsEnabled"];
    [defaults setBool:completedJobNotificationsEnabled forKey:@"completedJobNotificationsEnabled"];
    [defaults setBool:failedJobNotificationsEnabled forKey:@"failedJobNotificationsEnabled"];
    [defaults setInteger:cdhVersion forKey:@"cdhVersion"];
}

@end
